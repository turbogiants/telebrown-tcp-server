package net.browny.common.crypto;

import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.LogManager;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.*;
import java.security.spec.KeySpec;
import java.util.Arrays;

public final class AESCrypto {

    private static final Logger LOGGER = LogManager.getRootLogger();

    private Cipher cipher;
    private SecretKey sKey;
    private byte[] clientIV; // will be only used by Client
    private byte[] serverIV; // will be only used by Client

    private static final int PASS_KEY_ITER = 4096;
    private static final char[] PASS_KEY = {
            0x4b04, 0x481d, 0x4c77, 0xd5ef, 0x136f, 0x2eff, 0x2d7e, 0xbe6e, 0xc89c, 0xb9b7, 0xe818, 0xc60a, 0xea96, 0x1751, 0xae47, 0x45fa,
            0x744, 0xf274, 0xf4ad, 0x1a0a, 0x2871, 0xf053, 0x539c, 0x3044, 0x2e8e, 0x7201, 0x3b55,  0x4757, 0x79f7, 0xaf9e, 0x7f9b, 0x65ae,
            0x6100, 0xa0fe, 0x89e9, 0xdd28, 0x3769, 0xd095, 0xf7a8, 0x5daa, 0xb963, 0x4116, 0xee98, 0x8cae, 0xb015, 0x2c23, 0xc81c, 0x9358,
            0x4217, 0x81a, 0x785f, 0x985b, 0x5a2c, 0xd1df, 0xf1a7, 0x99ea, 0x6523, 0x1f1, 0x5ba9, 0x314e, 0x22f2, 0x7111, 0x1d1c, 0x30d0,
            0x238b, 0x14c0, 0x76e1, 0x944d, 0xbf53, 0x9c0a, 0x7c08, 0xa9b3, 0x8fd3, 0x30c9, 0xf58d, 0x1b33, 0x4a91, 0xb5aa, 0x533f, 0xedc9,
            0xd741, 0x8e86, 0x5485, 0x7ab2, 0x3612, 0x251d, 0x6583, 0x59c1, 0xe812, 0xcf4, 0x739a, 0x8747, 0xdc95, 0x85fe, 0x22e2, 0x7576,
            0xed18, 0x7484, 0xcf4d, 0x3858, 0xa2c, 0xcf00, 0xcd7b, 0x510f, 0x32d5, 0xdfdf, 0x2864, 0x1456, 0x73d9, 0xd502, 0xf1e4, 0x2f9a,
            0x322f, 0x61ac, 0x888e, 0x6e8, 0xa0f1, 0x4332, 0xd5ca, 0xa5fc, 0xc332, 0x9dd1, 0x226d, 0x9b4e, 0xe705, 0x407e, 0xa3e9, 0xef9e,
            0x523, 0x4257, 0x5cd3, 0xf33a, 0x5bb5, 0xd9b5, 0x5a97, 0xf016, 0x83b5, 0xb927, 0x3222, 0x6183, 0x80d2, 0xe76a, 0x241c, 0xcdde,
            0x90a1, 0xc3b8, 0x1ffb, 0xf840, 0xfbfd, 0x16c6, 0x8e5b, 0x8ce9, 0x7aad, 0x127c, 0x2385, 0xbad, 0xc4b5, 0x4621, 0xcd1d, 0x2087,
            0xfcd, 0x9080, 0xa41b, 0x217b, 0xcbac, 0x87de, 0x6cb1, 0x2788, 0x53b9, 0x7321, 0x1579, 0xfbc2, 0xe97d, 0xb063, 0xf1f9, 0x963d,
            0xd225, 0x603b, 0xa42b, 0xd2d4, 0x5da2, 0x703f, 0x6fcb, 0xcff2, 0x5c5b, 0xf90a, 0x3c71, 0x8ec8, 0xfc68, 0x3403, 0x626e, 0x38a3,
            0xd04e, 0xe747, 0xb87c, 0xff3d, 0x71a2, 0x9414, 0xfd19, 0xbaf7, 0x8af3, 0xed62, 0xc2c, 0x8127, 0xb1ab, 0xb715, 0x731, 0x2f9b,
            0x9069, 0xed3e, 0x4e9c, 0x56a7, 0xb329, 0x8e13, 0xbf77, 0xd9a5, 0xd695, 0x45d3, 0x3643, 0xdf72, 0x7a17, 0x3b67, 0x1f0a, 0xd163,
            0x4ab1, 0x48b4, 0x1843, 0x3b2b, 0x8011, 0x4f39, 0xbd1, 0x4ddf, 0xee42, 0x69c3, 0xf8ae, 0x8cbf, 0xba78, 0xc7f8, 0x856e, 0xbd07,
            0x9e74, 0x12f1, 0xb954, 0x8151, 0xc549, 0xa89, 0x5b06, 0x216b, 0xcf03, 0xd87f, 0xa9da, 0x178b, 0x6dcc,
    };

    private static final int SALT_KEY_SIZE = 256;
    private static final byte[] SALT_KEY = {
            0x76, (byte)0x86, 0x6e, (byte)0xf9, (byte)0x84, 0x5, 0x4c, 0x43, (byte)0x8b, 0x7, 0x3, 0x5f, (byte)0xc7, (byte)0xaf, 0x14, (byte)0x95,
            0xd, 0x28, 0x10, 0x13, 0x21, 0x32, 0x75, 0x6a, (byte) 0xdf, (byte)0xdf, (byte)0xa3, 0x4d, 0x6e, (byte)0xed, 0x22, (byte)0xe3,
            0x6b, (byte)0xe7, (byte)0xb0, 0x4c, 0x38, (byte)0x92, 0x5c, 0x72, 0x19, (byte)0x8c, (byte)0xf5, (byte)0xd0, (byte)0x9a, (byte)0xd2, (byte)0xe0, 0x4a,
            0x65, (byte)0x9c, 0x27, (byte)0x84, (byte)0xa0, (byte)0xe8, 0x43, (byte)0xb9, 0x6a, (byte)0xff, (byte)0x88, 0x10, 0x7f, 0x29, (byte)0xdb, 0x3e,
            0x37, 0x8, 0x11, 0x69, (byte)0xe0, (byte)0xcc, 0x4a, (byte)0xf5, (byte)0xde, (byte)0xcd, (byte)0xcd, 0x57, (byte)0xe3, 0x29, 0x24, (byte)0xa4,
            (byte)0xf5, 0x5b, 0x5a, 0x1f, 0x5d, 0x73, 0x36, (byte)0x85, 0x7f, 0x53, (byte)0x85, (byte)0xe4, (byte)0x90, (byte)0xa1, 0x6b, 0x19,
            (byte)0xf0, (byte)0xd2, 0x60, 0x20, (byte)0xdf, (byte)0x93, (byte)0xb5, 0x26, (byte)0xd3, 0x7e, 0x4e, 0x59, 0x18, 0xa, 0x48, 0x57,
            0x50, 0x6b, 0x12, (byte)0x92, (byte)0xfe, 0xc, 0x44, (byte)0xe6, (byte)0xfa, (byte)0xdd, 0x2a, (byte)0x8d, (byte)0x9c, 0x32, 0xc, 0x3d,
            (byte)0xee, 0x74, 0x4a, (byte)0xab, (byte)0xab, 0xe, 0x26, (byte)0xc5, 0x75, 0x4f, 0x15, 0x2d, 0x37, (byte)0xa1, 0x1d, 0x71,
            (byte)0xc2, 0x7a, (byte)0xa4, (byte)0xcc, (byte)0xb3, 0x2d, (byte)0xa8, (byte)0xb8, (byte)0xbc, 0x7c, 0x7b, 0x42, 0x45, 0x3a, 0x5c, 0x6e,
            (byte)0xf3, (byte)0x9e, (byte)0xcf, 0x27, (byte)0xd7, (byte)0xff, 0xb, (byte)0x91, 0x9, 0x21, 0x54, (byte)0x9d, 0x28, (byte)0xeb, (byte)0xfb, (byte)0x85,
            (byte)0xf8, (byte)0xdf, 0x72, (byte)0xdd, 0x39, 0xe, 0x6c, 0x4, (byte)0xd4, 0x4, 0x62, 0x2c, 0x6a, 0x78, (byte)0xfd, 0xe,
            0x46, (byte)0xbd, (byte)0xdf, (byte)0xaf, (byte)0xdc, 0x7f, 0x63, (byte)0xc7, (byte)0xe2, 0x3f, 0x52, (byte)0x89, 0x72, 0x6d, (byte)0xa7, 0x2b,
            0x47, (byte)0xcb, 0x6b, (byte)0x92, (byte)0xd7, (byte)0xfb, (byte)0xe5, 0x41, (byte)0xf6, (byte)0xe1, 0x9, 0x62, 0x28, (byte)0xdf, 0x26, (byte)0x98,
            0x4e, (byte)0xee, (byte)0x90, 0x2b, 0x78, (byte)0xa3, (byte)0xba, (byte)0xb5, 0x45, (byte)0xf6, (byte)0xd1, (byte)0xe2, (byte)0x9a, (byte)0xda, 0x65, (byte)0xc4,
            0x33, 0x4f, 0x59, (byte)0x9f, 0x4b, (byte)0xc2, (byte)0xd6, 0x5e, (byte)0xed, (byte)0x83, (byte)0xfd, 0x4c, (byte)0xc8, 0x47, 0x6d, 0x3e,
    };

    public static void main(String[] args) {
        byte[] data = {0, 0};
        System.out.println("BaseText: " + Arrays.toString(data));
        System.out.println("SHA-256: " + getSha256(data));
        AESCrypto brownyCrypto = new AESCrypto();
        try {
            byte[] iv = AESCrypto.generateIV();
            byte[] enc = brownyCrypto.encrypt(data, iv);
            System.out.println("EncText: " + new String(enc));
            System.out.println("SHA-256: " + getSha256(enc));
            byte[] dec = brownyCrypto.decrypt(enc, iv);
            System.out.println("DecText: " + Arrays.toString(dec));
            System.out.println("SHA-256: " + getSha256(dec));
        } catch (GeneralSecurityException e) {
            e.printStackTrace();
        }
    }

    public static String getSha256(byte[] input)
    {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] messageDigest = md.digest(input);
            BigInteger no = new BigInteger(1, messageDigest);
            StringBuilder hashtext = new StringBuilder(no.toString(16));
            while (hashtext.length() < 32) {
                hashtext.insert(0, "0");
            }
            return hashtext.toString();
        }
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public AESCrypto(){
        try {
            this.cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            this.sKey = generateKey();

        } catch (GeneralSecurityException e) {
            LOGGER.error(e.getStackTrace());
        }
    }

    private SecretKey generateKey() throws GeneralSecurityException {
        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
        KeySpec spec = new PBEKeySpec(PASS_KEY, SALT_KEY, PASS_KEY_ITER, SALT_KEY_SIZE);
        return new SecretKeySpec(factory.generateSecret(spec).getEncoded(), "AES");
    }

    public byte[] encrypt(byte[] byteToEncrypt, IvParameterSpec IV) throws GeneralSecurityException {
        this.cipher.init(Cipher.ENCRYPT_MODE, this.sKey, IV);
        return this.cipher.doFinal(byteToEncrypt);
    }

    public byte[] encrypt(byte[] byteToEncrypt, byte[] IV) throws GeneralSecurityException {
        return encrypt(byteToEncrypt, new IvParameterSpec(IV));
    }

    public byte[] decrypt(byte[] byteToDecrypt, IvParameterSpec IV) throws GeneralSecurityException {
        this.cipher.init(Cipher.DECRYPT_MODE, this.sKey, IV);
        return this.cipher.doFinal(byteToDecrypt);
    }

    public byte[] decrypt(byte[] byteToDecrypt, byte[] IV) throws GeneralSecurityException {
        return decrypt(byteToDecrypt, new IvParameterSpec(IV));
    }

    public static byte[] generateIV() throws GeneralSecurityException {
        SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
        byte[] byteIV = new byte[16];
        random.nextBytes(byteIV);
        return byteIV;
    }

    public void setServertIV(byte[] serverIV) {
        this.serverIV = serverIV;
    }

    public byte[] getServerIV() {
        return serverIV;
    }

    public void setClientIV(byte[] clientIV) {
        this.clientIV = clientIV;
    }

    public byte[] getClientIV() {
        return clientIV;
    }


}
